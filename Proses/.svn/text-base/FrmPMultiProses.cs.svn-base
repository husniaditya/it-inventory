using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using DevExpress.XtraEditors.Repository;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.XtraGrid.Menu;
using DevExpress.Utils.Menu;
using System.Collections;
using DevExpress.XtraGrid.Views.Grid;
using MySql.Data.MySqlClient;
using System.Reflection;
using KASLibrary;
using DevExpress.XtraEditors;

namespace CAS.Proses
{
    public partial class FrmPMultiProses : XtraForm
    {
        private GridColumn selectedCol;
        private DataTable dtTransaction;
        //private ArrayList tableNames = new ArrayList(new string[] {"prq","oms import", "oms lokal", "spb", "lph", "", "okl", "mor", "spm", "sjl", "", "rma", "rms", "spm", "sjr", "", "rsm", "spr", "rka"});
        private ArrayList menuIds = new ArrayList(new string[] { "231","232", "233", "239", "23a", "", "251", "252", "255", "256", "", "236", "237", "23b", "23c", "", "253", "257", "258"});

        public string Action
        {
            get { return rgAction.Properties.Items[rgAction.SelectedIndex].Description; }
        }

        public FrmPMultiProses()
        {
            InitializeComponent();
        }

        private void FrmPMultiProses_Load(object sender, EventArgs e)
        {
            try { Utility.ApplySkin(this); }
            catch { }

            rgAction.SelectedIndex = 0;
            dateFrom.DateTime = Utility.FirstDateInMonth(DB.loginDate);
            dateTo.DateTime = Utility.LastDateInMonth(DB.loginDate);

            ToolStripButton tsbtnShowDetail = new ToolStripButton("Show Details", null, new EventHandler(tsbtnShowDetail_Click), "tsbtnShowDetail");
            gcxResult.ExToolStrip.Items.Add(tsbtnShowDetail);

            FillLudTransactions();
        }

        private void FillLudTransactions()
        {
            string query = "select menuid.menuid, menuid.caption, menuid.tablename from menuid, perms ";
            query += "where perms.menuid=menuid.menuid and ";
            query += "perms.role='" + DB.casUser.Role + "' and ";
            query += "(perms.update=1 or perms.delete=1 or perms.approve=1) and ";
            query += "perms.menuid in (";
            for (int i = 0; i < menuIds.Count-1; i++)
            {
                if (menuIds[i].ToString() != "")
                    query += "'" + menuIds[i].ToString() + "',";
            }
            query += "'" + menuIds[menuIds.Count-1].ToString() + "')";
            dtTransaction = DB.sql.Select(query);
            ludTransactions.Properties.DataSource = dtTransaction;
            ludTransactions.Properties.DisplayMember = "caption";
            ludTransactions.Properties.ValueMember = "menuid";
            ludTransactions.Properties.PopulateColumns();
            ludTransactions.Properties.Columns["caption"].Caption = "Transactions";
            ludTransactions.Properties.Columns["menuid"].Visible = false;
            ludTransactions.Properties.Columns["tablename"].Visible = false;
            ludTransactions.Properties.AutoSearchColumnIndex = 1;
            ludTransactions.ItemIndex = 0;
        }

        private void chkPeriode_CheckedChanged(object sender, EventArgs e)
        {
            dateFrom.Enabled = dateTo.Enabled = chkPeriode.Checked;
        }

        private void btnShow_Click(object sender, EventArgs e)
        {
            try
            {
                //check User privelege
                CheckUserPrivelege();

                MySqlDataAdapter masterAdapter = DB.sql.SelectAdapter(BuildMasterQuery());
                MySqlDataAdapter detailAdapter = DB.sql.SelectAdapter(BuildDetailQuery());

                //Create DataTable objects for representing database's tables
                DataSet dataSetMain = new DataSet();
                masterAdapter.Fill(dataSetMain, "Master");
                detailAdapter.Fill(dataSetMain, "Detail");

                //Set up a master-detail relationship between the DataTables
                DataColumn keyColumn = dataSetMain.Tables["Master"].Columns[0];
                DataColumn foreignKeyColumn = dataSetMain.Tables["Detail"].Columns[0];
                dataSetMain.Relations.Add("MasterDetail", keyColumn, foreignKeyColumn);

                //Bind the grid control to the data source
                gcxResult.ExGridControl.DataSource = dataSetMain.Tables["Master"];

                //Assign a Detail View to the relationship
                GridView detailView = new GridView(gcxResult.ExGridControl);
                gcxResult.ExGridControl.LevelTree.Nodes.Add("MasterDetail", detailView);
                detailView.PopulateColumns(dataSetMain.Tables["Detail"]);
                detailView.Columns[0].Visible = false;
                detailView.OptionsView.ShowGroupPanel = false;
                detailView.OptionsBehavior.Editable = false;

                gcxResult.ExGridView.OptionsView.ShowGroupPanel = false;
                gcxResult.ExGridView.OptionsBehavior.Editable = true;
                foreach (GridColumn col in gcxResult.ExGridView.Columns)
                {
                    if (col.FieldName != Action)
                        col.OptionsColumn.AllowEdit = false;
                }

                gcxResult.ExGridView.MouseDown += new MouseEventHandler(ExGridView_MouseDown);
                gcxResult.ExToolStrip.Items["tsbtnShowDetail"].Text = "Show Details";
                
                btnAction.Text = Action + " &All";
                btnAction.Visible = true;
            }
            catch(Exception ex)
            {
                MessageBox.Show(Action + " Action cannot be applied to this Transaction");// + "\r\n" + ex.Message);
                gcxResult.ExGridControl.DataSource = null;
                gcxResult.ExGridView.PopulateColumns();
            }
        }

        void ExGridView_MouseDown(object sender, MouseEventArgs e)
        {
            // obtaining hit info
            GridHitInfo hitInfo = gcxResult.ExGridView.CalcHitInfo(new Point(e.X, e.Y));
            selectedCol = hitInfo.Column;
            if (e.Button == MouseButtons.Right && (hitInfo.InColumn) && (hitInfo.Column.FieldName == Action))
            {
                gcxResult.ExGridView.OptionsMenu.EnableColumnMenu = false;
                // showing the custom context menu
                ViewMenu menu = new ViewMenu(gcxResult.ExGridView);
                DXMenuItem menuItem = new DXMenuItem("Check All", new EventHandler(gridView_CheckColumn));
                menu.Items.Add(menuItem);
                menuItem = new DXMenuItem("Clear All", new EventHandler(gridView_CheckColumn));
                menu.Items.Add(menuItem);
                menu.Show(hitInfo.HitPoint);
            }
            else
            {
                gcxResult.ExGridView.OptionsMenu.EnableColumnMenu = true;
            }

            if (e.Button == MouseButtons.Left && e.Clicks == 2 && (hitInfo.InRow) && (!gcxResult.ExGridView.IsGroupRow(hitInfo.RowHandle)))
            {
                // switching focus
                gcxResult.ExGridView.FocusedRowHandle = hitInfo.RowHandle;

                string noJurnal = gcxResult.ExGridView.GetFocusedDisplayText();
                if (noJurnal.IndexOf("-") < 0) return;

                DataTable dtMenu = DB.sql.Select("select m.menuid, m.formname from menuid m, modul d where m.menuid=d.menuid and noseri='" + noJurnal.Substring(0, 3) + "'");

                if (dtMenu.Rows.Count == 1)
                {
                    string formName = "CAS." + dtMenu.Rows[0]["formname"].ToString();
                    Form newForm = CreateForm(formName);
                    
                    if (newForm == null) return;
                    
                    newForm.Name = dtMenu.Rows[0]["formname"].ToString();
                    newForm.Tag = dtMenu.Rows[0]["menuid"].ToString();
                    newForm.MdiParent = this.MdiParent;

                    if (formName.Contains("Transaction"))
                        ((Transaction.BaseTransaction)newForm).NoJurnal = noJurnal;
                    else if (formName.Contains("Master"))
                        ((Master.BaseMaster)newForm).NoKode = noJurnal;

                    newForm.Show();
                }
            }
        }

        void gridView_CheckColumn(object sender, EventArgs e)
        {
            try
            {
                DXMenuItem menuItem = sender as DXMenuItem;
                if (menuItem == null) return;

                bool value = (menuItem.Caption == "Check All");

                CheckAll(selectedCol, value);
            }
            catch { }
        }

        void CheckAll(GridColumn column, bool value)
        {
            for (int i = 0; i < gcxResult.ExGridView.RowCount; i++)
            {
                gcxResult.ExGridView.SetRowCellValue(i, column, value);
            }
        }

        private string BuildMasterQuery()
        {
            string query = "";
            string tablename = dtTransaction.Select("menuid='" + ludTransactions.EditValue.ToString() + "'")[0]["tablename"].ToString();

            switch (ludTransactions.EditValue.ToString())
            {
                case "231":     // PR
                    query = "select prq as `No Doc`, `date` as `Tgl Dibutuhkan`, `remark` as `Keterangan`, @action from prq";
                    break;
                case "232":     // PO
                case "233":     // PO impor
                case "239":     // SPB
                case "23a":     // LPB
                case "236":     // PR Retur
                case "237":     // PO Retur
                case "23b":     // SPM Retur
                case "23c":     // SJ Retur
                    query = "select @table as `No Doc`, sub.name as `Nama Supplier`, @table.`date` as `Tanggal`, @table.`remark` as `Keterangan`, @table.@action from @table, sub where @table.sub=sub.sub";
                    break;
                
                case "251":     // SO
                case "255":     // SPM
                case "256":     // SJ
                case "253":     // SO Retur
                case "257":     // SPB Retur
                case "258":     // LPB Retur
                    query = "select @table as `No Doc`, sub.name as `Nama Customer`, @table.`date` as `Tanggal`, @table.`remark` as `Keterangan`, @table.@action from @table, sub where @table.sub=sub.sub";
                    break;
                case "252":     // MO
                    query = "select mor as `No Doc`, sub.name as `Nama Customer`, mor.`date` as `Tanggal`, mor.remark as `Keterangan`, mor.@action from mor, okl, sub where mor.okl=okl.okl and okl.sub=sub.sub";
                    break;
            }
            query = query.Replace("@table", tablename);
            query = query.Replace("@action", "`" + rgAction.EditValue.ToString() + "` as `" + Action + "`");
            if (query.IndexOf("where") < 0)
                query += " where ";
            else
                query += " and ";

            // add aprov/close/delete
            query += tablename + ".`" + rgAction.EditValue.ToString() + "`=0";

            if (chkPeriode.Checked)
                query += " and " + tablename + ".date between " + dateFrom.DateTime.ToString("yyyyMMdd") + " and " + dateTo.DateTime.AddDays(1).ToString("yyyyMMdd");
            else
                query += " and " + tablename + ".period='" + DB.loginPeriod + "'";

            return query;
        }

        private string BuildDetailQuery()
        {
            string query = "";
            string tablename = dtTransaction.Select("menuid='" + ludTransactions.EditValue.ToString() + "'")[0]["tablename"].ToString();

            switch (ludTransactions.EditValue.ToString())
            {
                case "231":     // PR
                    query = "select prd.prq, inv as `Kode Barang`, prd.remark as `Keterangan`, prd.loc as `Loc`, qty as `Quantity`, unit as `Unit`, dateneed as `Date Need` from prq, prd where prq.prq=prd.prq";
                    break;
                case "233":    //PO impor
                case "232":     // PO
                    query = "select omd.oms, inv as `Kode Barang`, omd.remark as `Keterangan`, omd.loc as `Loc`, qty as `Quantity`, unit as `Unit` from oms, omd where oms.oms=omd.oms";
                    break;
                case "239":     // SPB
                    query = "select spbd.spb, inv as `Kode Barang`, spbd.remark as `Keterangan`, spbd.loc as `Loc`, qty as `Quantity`, unit as `Unit` from spb, spbd where spb.spb=spbd.spb";
                    break;
                case "23a":     // LPB
                    query = "select lpd.lph, inv as `Kode Barang`, lpd.remark as `Keterangan`, lpd.loc as `Loc`, qty as `Quantity`, unit as `Unit` from lph, lpd where lph.lph=lpd.lph";
                    break;
                case "251":     // SO
                    query = "select okd.okl, nodsg as `No Design`, inv as `Kode Barang`, okd.remark as `Keterangan`, okd.loc as `Loc`, qty as `Quantity`, unit as `Unit`, dateneed as `Date Need` from okl, okd where okl.okl=okd.okl";
                    break;
                case "252":     // MO
                    query = "select mor.mor, nodsg as `No Design`, inv as `Kode Barang`, remark as `Keterangan`, qty as `Quantity`, unit as `Unit` from mor";
                    break;
                case "255":     // SPM
                    query = "select spd.spm, nodsg as `No Design`, inv as `Kode Barang`, spd.remark as `Keterangan`, spd.loc as `Loc`, qty as `Quantity`, unit as `Unit` from spm, spd where spm.spm=spd.spm";
                    break;
                case "256":     // SJ
                    query = "select sjd.sjh, nodsg as `No Design`, inv as `Kode Barang`, sjd.remark as `Keterangan`, sjd.loc as `Loc`, qty as `Quantity`, unit as `Unit` from sjh, sjd where sjh.sjh=sjd.sjh";
                    break;
                case "236":     // PR Retur
                    query = "select rma.rma, inv as `Kode Barang`, rmb.remark as `Keterangan`, rmb.loc as `Loc`, qty as `Quantity`, unit as `Unit`, date as `Date` from rma, rmb where rma.rma=rmb.rma";
                    break;
                case "237":     // PO Retur
                    query = "select rms.rms, inv as `Kode Barang`, rmd.remark as `Keterangan`, rmd.loc as `Loc`, qty as `Quantity`, unit as `Unit` from rms, rmd where rms.rms=rmd.rms";
                    break;
                case "23b":     // SPM Retur
                    query = "select spd.spm, inv as `Kode Barang`, spd.remark as `Keterangan`, spd.loc as `Loc`, qty as `Quantity`, unit as `Unit` from spm, spd where spm.spm=spd.spm";
                    break;
                case "23c":     // SJ Retur
                    query = "select sjr.sjr, inv as `Kode Barang`, sjrd.remark as `Keterangan`, sjrd.loc as `Loc`, qty as `Quantity`, unit as `Unit` from sjr, sjrd where sjr.sjr=sjrd.sjr";
                    break;
                case "253":     // SO Retur
                    query = "select rsm.rsm, nodsg as `No Design`, inv as `Kode Barang`, rsmd.remark as `Keterangan`, rsmd.loc as `Loc`, qty as `Quantity`, unit as `Unit` from rsm, rsmd where rsm.rsm=rsmd.rsm";
                    break;
                case "257":     // SPB Retur
                    query = "select spr.spr, inv as `Kode Barang`, sprd.remark as `Keterangan`, sprd.loc as `Loc`, qty as `Quantity`, unit as `Unit` from spr, sprd where spr.spr=sprd.spr";
                    break;
                case "258":     // LPB Retur
                    query = "select rka.rka, inv as `Kode Barang`, rkb.remark as `Keterangan`, rkb.loc as `Loc`, qty as `Quantity`, unit as `Unit` from rka, rkb where rka.rka=rkb.rka";
                    break;
            }

            if (query.IndexOf("where") < 0)
                query += " where ";
            else
                query += " and ";

            // add aprov/close/delete
            query += tablename + ".`" + rgAction.EditValue.ToString() + "`=0";

            if (chkPeriode.Checked)
                query += " and " + tablename + ".date between " + dateFrom.DateTime.ToString("yyyyMMdd") + " and " + dateTo.DateTime.AddDays(1).ToString("yyyyMMdd");
            else
                query += " and " + tablename + ".period='" + DB.loginPeriod + "'";

            return query;
        }

        private void btnAction_Click(object sender, EventArgs e)
        {
            CheckAll(gcxResult.ExGridView.Columns[rgAction.Properties.Items[rgAction.SelectedIndex].Description], true);
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            string message = "", jurnal="", updateQuery = "";
            string tablename = dtTransaction.Select("menuid='" + ludTransactions.EditValue.ToString() + "'")[0]["tablename"].ToString();
            string action = rgAction.EditValue.ToString();

            for (int i = 0; i < gcxResult.ExGridView.RowCount; i++)
            {
                if (gcxResult.ExGridView.GetDataRow(i)[Action].ToString() == "0")
                    continue;

                try
                {
                    jurnal = (gcxResult.ExGridView.GetDataRow(i)[0]).ToString();
                    updateQuery = BuildSaveQuery(jurnal);

                    if (rgAction.EditValue.ToString() == "delete")
                    {
                        string query = "Select FCekDeleted('" + tablename + "','" + jurnal + "')";
                        if (DB.sql.Select(query).Rows[0][0].ToString() == "False")
                            throw new Exception("Can't Delete this transaction");
                    }
                    
                    DB.sql.Execute(updateQuery);

                    if (rgAction.EditValue.ToString() == "delete")
                    {
                        DB.sql.Execute("Call SP_Delete('" + tablename + "','" + jurnal + "')");
                        DB.sql.Execute("Call SP_OpenTransaction('" + tablename + "','" + jurnal + "')");
                    }
                    message += jurnal + ":" + Action + "d";
                }
                catch(Exception ex)
                {
                    message += jurnal + ":" + updateQuery + "; " + ex.Message + "\r\n";
                }
            }
            
            Utility.ShowMessage(message, "Result message: ");
        }

        private string BuildSaveQuery(string jurnal)
        {
            string query = "";
            string tablename = dtTransaction.Select("menuid='" + ludTransactions.EditValue.ToString() + "'")[0]["tablename"].ToString();
            string action = rgAction.EditValue.ToString();

            query = "update " + tablename + " set `" + action + "`=1 where " + tablename + "='" + jurnal + "'";

            return query;
        }

        private void tsbtnShowDetail_Click(object sender, EventArgs e)
        {
            if ((sender as ToolStripButton).Text == "Show Details")
            {
                for (int i = 0; i < gcxResult.ExGridView.RowCount; i++)
                    gcxResult.ExGridView.ExpandMasterRow(i);

                (sender as ToolStripButton).Text = "Hide Details";
            }
            else
            {
                gcxResult.ExGridView.CollapseAllDetails();

                (sender as ToolStripButton).Text = "Show Details";
            }
        }

        public Form CreateForm(string formName)
        {
            Type frmType = Assembly.GetExecutingAssembly().GetType(formName);

            if (frmType != null)
                return (Form)Activator.CreateInstance(frmType);
            else
                return null;
        }

        private void CheckUserPrivelege()
        {
            switch (rgAction.EditValue.ToString())
            {
                case "approve":
                    if (!DB.casUser.AllowApprove(ludTransactions.EditValue.ToString()))
                        throw new Exception("You don't have privelege to Approve this Transaction");
                    break;
                case "close":
                    if (!DB.casUser.AllowUpdate(ludTransactions.EditValue.ToString()))
                        throw new Exception("You don't have privelege to Close this Transaction");
                    break;
                case "delete":
                    if (!DB.casUser.AllowDelete(ludTransactions.EditValue.ToString()))
                        throw new Exception("You don't have privelege to Delete this Transaction");
                    break;
            }
        }
    }
}